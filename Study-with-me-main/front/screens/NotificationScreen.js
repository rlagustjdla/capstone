import React, { useEffect, useState, useCallback } from 'react';
import { View, Text, StyleSheet, SectionList, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation, useIsFocused } from '@react-navigation/native';
import api from '../services/api';

const NotificationScreen = () => {
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigation = useNavigation();
  const isFocused = useIsFocused();

  // ‚úÖ ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ìï®Ïàò Ï†ïÏùò (Ïû¨ÏÇ¨Ïö© ÏúÑÌï¥ Î∞ñÏóê Î∫å)
  const fetchNotifications = useCallback(async () => {
    try {
      setLoading(true);
      const userId = await AsyncStorage.getItem('userId');
      const response = await api.get(`/notification/${userId}`);
      const filtered = response.data.filter(n => n.type !== 'chat');
      setNotifications(filtered);
    } catch (err) {
      console.error('ÏïåÎ¶º Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  // ‚úÖ ÏµúÏ¥à Î†åÎçîÎßÅ Ïãú
  useEffect(() => {
    fetchNotifications();
  }, []);

  // ‚úÖ ÌôîÎ©¥Ïóê Ìè¨Ïª§Ïä§Îê† ÎïåÎßàÎã§ ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    if (isFocused) fetchNotifications();
  }, [isFocused]);

  const groupByDate = () => {
    const grouped = {};
    notifications.forEach(noti => {
      const date = new Date(noti.createdAt).toLocaleDateString();
      if (!grouped[date]) grouped[date] = [];
      grouped[date].push(noti);
    });
    return Object.keys(grouped).map(date => ({
      title: date,
      data: grouped[date].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
    }));
  };

  const handlePress = async (noti) => {
    try {
      if (!noti.isRead) {
        await api.patch(`/notification/read/${noti._id}`);
      }

      switch (noti.type) {
        case 'schedule':
        case 'reminder':
          if (noti.targetType === 'Schedule' && noti.targetId) {
            try {
              const res = await api.get(`/schedule/${noti.targetId}`);
              const studyId = res.data.study?._id || res.data.study;
              if (studyId) {
                navigation.navigate('Ïä§ÌÑ∞ÎîîÏÉÅÏÑ∏', { studyId });
              } else {
                Alert.alert('Ïò§Î•ò', 'Ïó∞Í≤∞Îêú Ïä§ÌÑ∞Îîî Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
              }
            } catch (err) {
              console.error('üî¥ Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', err.message);
              Alert.alert('Ïò§Î•ò', 'ÏùºÏ†ï Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
          } else {
            navigation.navigate('Tabs', { screen: 'Ìôà' });
          }
          break;

        case 'apply':
        case 'approve':
        case 'commentApply':
        case 'commentPost':
        case 'notice':
          navigation.navigate('Ïä§ÌÑ∞ÎîîÏÉÅÏÑ∏');
          break;

        default:
          console.warn('Ïïå Ïàò ÏóÜÎäî ÏïåÎ¶º Ïú†ÌòïÏûÖÎãàÎã§:', noti.type);
          break;
      }
    } catch (err) {
      console.error('üî¥ ÏïåÎ¶º Ïù¥Îèô Ïò§Î•ò:', err.message);
      Alert.alert('Ïò§Î•ò', 'ÏïåÎ¶º Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleMarkAllAsRead = async () => {
    try {
      const userId = await AsyncStorage.getItem('userId');
      await api.patch(`/notification/user/${userId}/readAll`);
      const updated = notifications.map(n => ({ ...n, isRead: true, readAt: new Date() }));
      setNotifications(updated);
    } catch (err) {
      Alert.alert('Ïã§Ìå®', 'Ï†ÑÏ≤¥ ÏùΩÏùå Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity
      style={[styles.itemBox, !item.isRead && styles.unread]}
      onPress={() => handlePress(item)}
    >
      <Text style={styles.content}>{item.content}</Text>
      <Text style={styles.date}>{new Date(item.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>ÏïåÎ¶º</Text>
        <TouchableOpacity onPress={handleMarkAllAsRead}>
          <Text style={styles.markAll}>Ï†ÑÏ≤¥ ÏùΩÏùå</Text>
        </TouchableOpacity>
      </View>

      {loading ? (
        <ActivityIndicator size="large" style={{ marginTop: 20 }} />
      ) : notifications.length === 0 ? (
        <Text style={styles.emptyText}>ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§</Text>
      ) : (
        <SectionList
          sections={groupByDate()}
          keyExtractor={(item) => item._id}
          renderItem={renderItem}
          renderSectionHeader={({ section }) => (
            <Text style={styles.sectionHeader}>{section.title}</Text>
          )}
        />
      )}
    </View>
  );
};

export default NotificationScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    paddingTop: 35
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 14,
    borderBottomWidth: 0.8,
    borderColor: '#ddd',
    backgroundColor: '#001f3f'
  },
  headerTitle: { fontSize: 18, color: 'white'},
  markAll: { color: '#007bff', fontSize: 14 },
  itemBox: { padding: 12, borderBottomWidth: 0.5, borderColor: '#ccc' },
  unread: { backgroundColor: '#eef6ff' },
  content: { fontSize: 15 },
  date: { fontSize: 12, color: '#888', marginTop: 4 },
  sectionHeader: {
    backgroundColor: '#f1f1f1',
    paddingVertical: 6,
    paddingHorizontal: 16,
    fontWeight: 'bold',
    fontSize: 14,
    color: '#444'
  },
  emptyText: { textAlign: 'center', marginTop: 20, color: '#888' }
});
